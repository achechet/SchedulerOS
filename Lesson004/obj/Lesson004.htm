<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Lesson004.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Lesson004.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Oct 03 13:01:29 2022
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_CRC_Calculate &rArr; HED_CRC16
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4f]">__user_initial_stackheap</a>
 <LI><a href="#[48]">setWrMode</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[a]">Timer0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Timer0_IRQHandler</a><BR>
 <LI><a href="#[b]">Timer1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Timer1_IRQHandler</a><BR>
 <LI><a href="#[c]">WDT_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">WDT_IRQHandler</a><BR>
 <LI><a href="#[d]">EEPROM_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">EEPROM_IRQHandler</a><BR>
 <LI><a href="#[e]">NVMError_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NVMError_IRQHandler</a><BR>
 <LI><a href="#[f]">GPIO_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">GPIO_IRQHandler</a><BR>
 <LI><a href="#[10]">RNG1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">RNG1_IRQHandler</a><BR>
 <LI><a href="#[11]">SCIRST_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SCIRST_IRQHandler</a><BR>
 <LI><a href="#[12]">SCISend_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SCISend_IRQHandler</a><BR>
 <LI><a href="#[13]">SCIReceive_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SCIReceive_IRQHandler</a><BR>
 <LI><a href="#[14]">SCIBufOverFlow_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SCIBufOverFlow_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">EEPROM_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">GPIO_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">NVMError_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RNG1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">SCIBufOverFlow_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">SCIRST_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">SCIReceive_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">SCISend_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">Timer0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">Timer1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">__main</a> from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[17]">cmd_CRC_Calculate</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
 <LI><a href="#[18]">cmd_GET_INFO</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
 <LI><a href="#[1c]">cmd_INSError</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
 <LI><a href="#[1b]">cmd_Loader_Resume</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
 <LI><a href="#[19]">cmd_NVM_Erase</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
 <LI><a href="#[1a]">cmd_NVM_Write</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
 <LI><a href="#[16]">cmd_Symmetry_ALG</a> from demo_apdu.o(.text) referenced from demo_apdu.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[52]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[53]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[21]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[25]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[54]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[55]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[56]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[57]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[58]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[59]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[5a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[5c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[5e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[60]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[61]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[62]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[63]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[65]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[66]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[67]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[69]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[6a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[6c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[6d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[22]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[6f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[26]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; DEMOCOS_PPS
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_CRC_Calculate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_Symmetry_ALG
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkWrSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Timer0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Timer1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NVMError_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMError_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMError_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RNG1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SCIRST_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIRST_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIRST_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCISend_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCISend_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCISend_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCIReceive_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIReceive_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIReceive_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SCIBufOverFlow_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIBufOverFlow_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIBufOverFlow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = main &rArr; DEMOCOS_PPS
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openWrSwitch
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeWrSwitch
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_T0_SendNBytes
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_T0_ReceiveNBytesRam
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_SetToStandby
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_DelayNETU
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_APDU_Dispatch
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMOCOS_PPS
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[35]"></a>Get_APDUResp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, demo_apdu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_APDU_Dispatch
</UL>

<P><STRONG><a name="[1c]"></a>cmd_INSError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, demo_apdu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>DemoCos_APDU_Dispatch</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DemoCos_APDU_Dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_APDUResp
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>cmd_Symmetry_ALG</STRONG> (Thumb, 342 bytes, Stack size 224 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = cmd_Symmetry_ALG &rArr; HED_DESBlock &rArr; cleanDESSFR
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DESBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DES3Block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>cmd_CRC_Calculate</STRONG> (Thumb, 168 bytes, Stack size 552 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = cmd_CRC_Calculate &rArr; HED_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>cmd_GET_INFO</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_GET_INFO &rArr; HED_GetRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetRandom
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetFactoryCode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetChipId
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_SendINS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>cmd_NVM_Erase</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = cmd_NVM_Erase &rArr; HED_FlashErasePage_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSend60
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSend60
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashEraseSectorNoChk_St
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashErasePage_St
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>cmd_NVM_Write</STRONG> (Thumb, 274 bytes, Stack size 528 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = cmd_NVM_Write &rArr; HED_FlashWritePage_St &rArr; FlashWriteNWord_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openSend60
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSend60
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashWriteWord_St
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashWritePage_St
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_SendINS
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_T0_ReceiveNBytesRam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>cmd_Loader_Resume</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, demo_apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = cmd_Loader_Resume &rArr; HED_FlashWriteWord_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashWriteWord_St
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashErasePage_St
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_apdu.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>openSend60</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, demo_subfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Erase
</UL>

<P><STRONG><a name="[41]"></a>closeSend60</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, demo_subfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Write
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Erase
</UL>

<P><STRONG><a name="[34]"></a>DemoCos_DelayNETU</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, demo_subfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMOCOS_PPS
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>DEMOCOS_PPS</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, demo_subfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DEMOCOS_PPS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_T0_SendNBytes
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_T0_ReceiveNBytesRam
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>DemoCos_SendINS</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, demo_subfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DemoCos_SendINS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_T0_SendNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_GET_INFO
</UL>

<P><STRONG><a name="[2e]"></a>HED_T0_SendNBytes</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoCos_SendINS
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMOCOS_PPS
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>HED_T0_ReceiveNBytesRam</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEMOCOS_PPS
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>HED_CRC16</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HED_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_CRC_Calculate
</UL>

<P><STRONG><a name="[45]"></a>HED_GetChipInfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HED_GetChipInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetFactoryCode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetChipId
</UL>

<P><STRONG><a name="[3d]"></a>HED_GetChipId</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HED_GetChipId &rArr; HED_GetChipInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetChipInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_GET_INFO
</UL>

<P><STRONG><a name="[3c]"></a>HED_GetFactoryCode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HED_GetFactoryCode &rArr; HED_GetChipInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_GetChipInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_GET_INFO
</UL>

<P><STRONG><a name="[3b]"></a>HED_GetRandom</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HED_GetRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_GET_INFO
</UL>

<P><STRONG><a name="[2f]"></a>HED_SetToStandby</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ciu98428f_api_base_nonvm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>closeWrSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>openWrSwitch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>chkWrSwitch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWrMode
</UL>

<P><STRONG><a name="[47]"></a>wr_SDPKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteNWord_St
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashErasePageNoChk_St
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashWriteWord_St
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashEraseSectorNoChk_St
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashErasePage_St
</UL>

<P><STRONG><a name="[40]"></a>HED_FlashErasePage_St</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HED_FlashErasePage_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWrMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_SDPKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_Loader_Resume
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Erase
</UL>

<P><STRONG><a name="[49]"></a>HED_FlashErasePageNoChk_St</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ciu98428f_api_nvm_stability.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWrMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_SDPKey
</UL>

<P><STRONG><a name="[42]"></a>HED_FlashEraseSectorNoChk_St</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HED_FlashEraseSectorNoChk_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWrMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_SDPKey
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Erase
</UL>

<P><STRONG><a name="[4a]"></a>FlashWriteNWord_St</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FlashWriteNWord_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWrMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_SDPKey
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashWritePage_St
</UL>

<P><STRONG><a name="[43]"></a>HED_FlashWritePage_St</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = HED_FlashWritePage_St &rArr; FlashWriteNWord_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteNWord_St
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Write
</UL>

<P><STRONG><a name="[44]"></a>HED_FlashWriteWord_St</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ciu98428f_api_nvm_stability.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HED_FlashWriteWord_St &rArr; setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWrMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_SDPKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_Loader_Resume
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_NVM_Write
</UL>

<P><STRONG><a name="[4c]"></a>getRnd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, c98c420n_api_des.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanDESSFR
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DESBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DES3Block
</UL>

<P><STRONG><a name="[4d]"></a>timeDelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c98c420n_api_des.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DESBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DES3Block
</UL>

<P><STRONG><a name="[4b]"></a>cleanDESSFR</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, c98c420n_api_des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cleanDESSFR
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRnd
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DESBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_DES3Block
</UL>

<P><STRONG><a name="[37]"></a>HED_DESBlock</STRONG> (Thumb, 990 bytes, Stack size 80 bytes, c98c420n_api_des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HED_DESBlock &rArr; cleanDESSFR
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanDESSFR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRnd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_Symmetry_ALG
</UL>

<P><STRONG><a name="[39]"></a>HED_DES3Block</STRONG> (Thumb, 1064 bytes, Stack size 80 bytes, c98c420n_api_des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HED_DES3Block &rArr; cleanDESSFR
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanDESSFR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRnd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_Symmetry_ALG
</UL>

<P><STRONG><a name="[38]"></a>memcmp</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_Symmetry_ALG
</UL>

<P><STRONG><a name="[73]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[28]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[76]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[78]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>setWrMode</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ciu98428f_nvm_stability.o(SETSYSNVMMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = setWrMode &rArr; chkWrSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkWrSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteNWord_St
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashErasePageNoChk_St
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashWriteWord_St
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashEraseSectorNoChk_St
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HED_FlashErasePage_St
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
