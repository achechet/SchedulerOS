; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\ciu98428f_api_nvm_stability.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ciu98428f_api_nvm_stability.d --cpu=SC000 --bi --apcs=interwork -O0 -I.\INC -I.\API -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\ARM\ARMSC000\Include --omf_browse=.\obj\ciu98428f_api_nvm_stability.crf API\CIU98428F_API_NVM_STABILITY.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  closeWrSwitch PROC
;;;45     *************************************************/ 
;;;46     void closeWrSwitch(void)
000000  2000              MOVS     r0,#0
;;;47     { 	// close NVM operation's switch
;;;48     	G_fCData1 = 0;
000002  495f              LDR      r1,|L1.384|
000004  6008              STR      r0,[r1,#0]  ; G_fCData1
;;;49     	G_fCData2 = 0;
000006  495f              LDR      r1,|L1.388|
000008  6008              STR      r0,[r1,#0]  ; G_fCData2
;;;50     	G_fCData3 = 0;	
00000a  495f              LDR      r1,|L1.392|
00000c  6008              STR      r0,[r1,#0]  ; G_fCData3
;;;51     }
00000e  4770              BX       lr
;;;52     /************************************************* 
                          ENDP

                  openWrSwitch PROC
;;;61     *************************************************/ 
;;;62     void openWrSwitch(void)
000010  485e              LDR      r0,|L1.396|
;;;63     { 	// open NVM operation's switch
;;;64     	
;;;65     	G_fCData1 = SWITCHTAG1;	
000012  495b              LDR      r1,|L1.384|
000014  6008              STR      r0,[r1,#0]  ; G_fCData1
;;;66     	G_fCData2 = SWITCHTAG2;
000016  43c0              MVNS     r0,r0
000018  495a              LDR      r1,|L1.388|
00001a  6008              STR      r0,[r1,#0]  ; G_fCData2
;;;67     	G_fCData3 = SWITCHTAG3;	
00001c  485c              LDR      r0,|L1.400|
00001e  495a              LDR      r1,|L1.392|
000020  6008              STR      r0,[r1,#0]  ; G_fCData3
;;;68     }
000022  4770              BX       lr
;;;69     /************************************************* 
                          ENDP

                  chkWrSwitch PROC
;;;78     *************************************************/ 
;;;79     void chkWrSwitch(void)
000024  b510              PUSH     {r4,lr}
;;;80     { 	// check NVM operation's switch
;;;81     	
;;;82     	if ((G_fCData1 == SWITCHTAG1) && (G_fCData2 == SWITCHTAG2)
000026  4856              LDR      r0,|L1.384|
000028  6800              LDR      r0,[r0,#0]  ; G_fCData1
00002a  4958              LDR      r1,|L1.396|
00002c  4288              CMP      r0,r1
00002e  d109              BNE      |L1.68|
000030  4854              LDR      r0,|L1.388|
000032  6800              LDR      r0,[r0,#0]  ; G_fCData2
000034  43c9              MVNS     r1,r1
000036  4288              CMP      r0,r1
000038  d104              BNE      |L1.68|
;;;83     	        && (G_fCData3 == SWITCHTAG3))
00003a  4853              LDR      r0,|L1.392|
00003c  6800              LDR      r0,[r0,#0]  ; G_fCData3
00003e  4954              LDR      r1,|L1.400|
000040  4288              CMP      r0,r1
000042  d001              BEQ      |L1.72|
                  |L1.68|
;;;84     	{		
;;;85     		;//none
;;;86     	}
;;;87     	else
;;;88     	{
;;;89     		Reset_Handler();				
000044  f7fffffe          BL       Reset_Handler
                  |L1.72|
;;;90     	}	
;;;91     }
000048  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  wr_SDPKey PROC
;;;102    *************************************************/ 
;;;103    void wr_SDPKey(void)
00004a  4850              LDR      r0,|L1.396|
;;;104    {
;;;105    	SYSNVMSDPK1 = SWITCHTAG1;
00004c  4951              LDR      r1,|L1.404|
00004e  6208              STR      r0,[r1,#0x20]
;;;106    	SYSNVMSDPK2 = SWITCHTAG2;
000050  43c0              MVNS     r0,r0
000052  6248              STR      r0,[r1,#0x24]
;;;107    	SYSNVMSDPK3 = SWITCHTAG3;
000054  484e              LDR      r0,|L1.400|
000056  6288              STR      r0,[r1,#0x28]
;;;108    	return;
;;;109    }
000058  4770              BX       lr
;;;110    
                          ENDP

                  HED_FlashErasePage_St PROC
;;;120    *************************************************/ 
;;;121    unsigned int HED_FlashErasePage_St(unsigned int FlashAddr)
00005a  b570              PUSH     {r4-r6,lr}
;;;122    {
00005c  4604              MOV      r4,r0
;;;123    	unsigned int i;
;;;124    	
;;;125    	FlashAddr &= ~0x1FF;//page aligned
00005e  0a64              LSRS     r4,r4,#9
000060  0264              LSLS     r4,r4,#9
;;;126    
;;;127    	__disable_irq();
000062  b672              CPSID    i
;;;128    	
;;;129    	wr_SDPKey();
000064  f7fffffe          BL       wr_SDPKey
;;;130    	*(unsigned int *)FlashAddr = 0xFFFFFFFF;
000068  2000              MOVS     r0,#0
00006a  43c0              MVNS     r0,r0
00006c  6020              STR      r0,[r4,#0]
;;;131    	setWrMode(NVMEPKEY | NVM_PAGE_ERASE);
00006e  484a              LDR      r0,|L1.408|
000070  f7fffffe          BL       setWrMode
;;;132    
;;;133    	__enable_irq();
000074  b662              CPSIE    i
;;;134    	
;;;135    	for(i = 0; i < PAGE_SIZE/4; i++)
000076  2500              MOVS     r5,#0
000078  e007              B        |L1.138|
                  |L1.122|
;;;136    	{
;;;137    		if(*((unsigned int*)FlashAddr + i) != 0xFFFFFFFF)
00007a  00a8              LSLS     r0,r5,#2
00007c  5820              LDR      r0,[r4,r0]
00007e  1c40              ADDS     r0,r0,#1
000080  d002              BEQ      |L1.136|
;;;138    		{
;;;139    			return NVM_FAILED;
000082  2000              MOVS     r0,#0
000084  43c0              MVNS     r0,r0
                  |L1.134|
;;;140    		}
;;;141    	}
;;;142    	return NVM_SUCCESS;
;;;143    }
000086  bd70              POP      {r4-r6,pc}
                  |L1.136|
000088  1c6d              ADDS     r5,r5,#1              ;135
                  |L1.138|
00008a  2d80              CMP      r5,#0x80              ;135
00008c  d3f5              BCC      |L1.122|
00008e  2000              MOVS     r0,#0                 ;142
000090  e7f9              B        |L1.134|
;;;144    
                          ENDP

                  HED_FlashErasePageNoChk_St PROC
;;;153    *************************************************/ 
;;;154    void HED_FlashErasePageNoChk_St(unsigned int FlashAddr)
000092  b510              PUSH     {r4,lr}
;;;155    {
000094  4604              MOV      r4,r0
;;;156    	FlashAddr &= ~0x1FF;//page aligned
000096  0a64              LSRS     r4,r4,#9
000098  0264              LSLS     r4,r4,#9
;;;157    	__disable_irq();
00009a  b672              CPSID    i
;;;158    	wr_SDPKey();
00009c  f7fffffe          BL       wr_SDPKey
;;;159    	*((unsigned int *)FlashAddr) = 0xFFFFFFFF;
0000a0  2000              MOVS     r0,#0
0000a2  43c0              MVNS     r0,r0
0000a4  6020              STR      r0,[r4,#0]
;;;160    	setWrMode(NVMEPKEY | NVM_PAGE_ERASE);
0000a6  483c              LDR      r0,|L1.408|
0000a8  f7fffffe          BL       setWrMode
;;;161    	__enable_irq();
0000ac  b662              CPSIE    i
;;;162    }
0000ae  bd10              POP      {r4,pc}
;;;163    
                          ENDP

                  HED_FlashEraseSectorNoChk_St PROC
;;;172    *************************************************/ 
;;;173    void HED_FlashEraseSectorNoChk_St(unsigned int FlashAddr)
0000b0  b510              PUSH     {r4,lr}
;;;174    {
0000b2  4604              MOV      r4,r0
;;;175    	FlashAddr &= ~0xFFF;//sector aligned
0000b4  0b24              LSRS     r4,r4,#12
0000b6  0324              LSLS     r4,r4,#12
;;;176    	__disable_irq();
0000b8  b672              CPSID    i
;;;177    	wr_SDPKey();
0000ba  f7fffffe          BL       wr_SDPKey
;;;178    	*((unsigned int *)FlashAddr) = 0xFFFFFFFF;
0000be  2000              MOVS     r0,#0
0000c0  43c0              MVNS     r0,r0
0000c2  6020              STR      r0,[r4,#0]
;;;179    	setWrMode(NVMEPKEY | NVM_SECTOR_ERASE);
0000c4  4834              LDR      r0,|L1.408|
0000c6  1e40              SUBS     r0,r0,#1
0000c8  f7fffffe          BL       setWrMode
;;;180    	__enable_irq();
0000cc  b662              CPSIE    i
;;;181    }
0000ce  bd10              POP      {r4,pc}
;;;182    
                          ENDP

                  FlashWriteNWord_St PROC
;;;194    *************************************************/  
;;;195    unsigned int FlashWriteNWord_St (unsigned int FlashAddr, unsigned int * DataBuf, unsigned int DataLen)
0000d0  b5f8              PUSH     {r3-r7,lr}
;;;196    {
0000d2  4604              MOV      r4,r0
0000d4  460e              MOV      r6,r1
0000d6  4617              MOV      r7,r2
;;;197    	unsigned int i;
;;;198    	
;;;199    	FlashAddr &= ~0xFF;	//half page aligned
0000d8  0a24              LSRS     r4,r4,#8
0000da  0224              LSLS     r4,r4,#8
;;;200    
;;;201    	__disable_irq();
0000dc  b672              CPSID    i
;;;202    	
;;;203    	wr_SDPKey();
0000de  f7fffffe          BL       wr_SDPKey
;;;204    	SYSNVMPBSTADDR = (unsigned int)DataBuf;
0000e2  482c              LDR      r0,|L1.404|
0000e4  6186              STR      r6,[r0,#0x18]
;;;205    	SYSNVMPBLEN = DataLen - 1;
0000e6  1e78              SUBS     r0,r7,#1
0000e8  492a              LDR      r1,|L1.404|
0000ea  61c8              STR      r0,[r1,#0x1c]
;;;206    	*((unsigned int *)FlashAddr) = 0xFFFFFFFF;
0000ec  2000              MOVS     r0,#0
0000ee  43c0              MVNS     r0,r0
0000f0  6020              STR      r0,[r4,#0]
;;;207    	setWrMode(NVMEPKEY | NVM_PAGE_WRITE);
0000f2  4829              LDR      r0,|L1.408|
0000f4  1d40              ADDS     r0,r0,#5
0000f6  f7fffffe          BL       setWrMode
;;;208    	
;;;209    	__enable_irq();
0000fa  b662              CPSIE    i
;;;210    	
;;;211    	for(i = 0; i < DataLen; i++)
0000fc  2500              MOVS     r5,#0
0000fe  e009              B        |L1.276|
                  |L1.256|
;;;212    	{
;;;213    		if(*((unsigned int*)FlashAddr + i) != *(DataBuf + i))
000100  00a8              LSLS     r0,r5,#2
000102  5820              LDR      r0,[r4,r0]
000104  00a9              LSLS     r1,r5,#2
000106  5871              LDR      r1,[r6,r1]
000108  4288              CMP      r0,r1
00010a  d002              BEQ      |L1.274|
;;;214    		{
;;;215    			return NVM_FAILED;
00010c  2000              MOVS     r0,#0
00010e  43c0              MVNS     r0,r0
                  |L1.272|
;;;216    		}
;;;217    	}
;;;218    	return NVM_SUCCESS;
;;;219    }
000110  bdf8              POP      {r3-r7,pc}
                  |L1.274|
000112  1c6d              ADDS     r5,r5,#1              ;211
                  |L1.276|
000114  42bd              CMP      r5,r7                 ;211
000116  d3f3              BCC      |L1.256|
000118  2000              MOVS     r0,#0                 ;218
00011a  e7f9              B        |L1.272|
;;;220    
                          ENDP

                  HED_FlashWritePage_St PROC
;;;231    *************************************************/  
;;;232    unsigned int HED_FlashWritePage_St (unsigned int FlashAddr, unsigned int * DataBuf)
00011c  b570              PUSH     {r4-r6,lr}
;;;233    {
00011e  4604              MOV      r4,r0
000120  460d              MOV      r5,r1
;;;234    	FlashAddr &= ~0x1FF;//page aligned
000122  0a64              LSRS     r4,r4,#9
000124  0264              LSLS     r4,r4,#9
;;;235    	
;;;236    	if(NVM_SUCCESS != FlashWriteNWord_St(FlashAddr, DataBuf, PAGE_SIZE/8))
000126  2240              MOVS     r2,#0x40
000128  4629              MOV      r1,r5
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       FlashWriteNWord_St
000130  2800              CMP      r0,#0
000132  d002              BEQ      |L1.314|
;;;237    		return NVM_FAILED;
000134  2000              MOVS     r0,#0
000136  43c0              MVNS     r0,r0
                  |L1.312|
;;;238    	if(NVM_SUCCESS != FlashWriteNWord_St(FlashAddr+PAGE_SIZE/2, DataBuf+PAGE_SIZE/8, PAGE_SIZE/8))
;;;239    		return NVM_FAILED;
;;;240    	
;;;241    	return NVM_SUCCESS;
;;;242    }
000138  bd70              POP      {r4-r6,pc}
                  |L1.314|
00013a  2240              MOVS     r2,#0x40              ;238
00013c  1de9              ADDS     r1,r5,#7              ;238
00013e  31f9              ADDS     r1,r1,#0xf9           ;238
000140  1de0              ADDS     r0,r4,#7              ;238
000142  30f9              ADDS     r0,r0,#0xf9           ;238
000144  f7fffffe          BL       FlashWriteNWord_St
000148  2800              CMP      r0,#0                 ;238
00014a  d002              BEQ      |L1.338|
00014c  2000              MOVS     r0,#0                 ;239
00014e  43c0              MVNS     r0,r0                 ;239
000150  e7f2              B        |L1.312|
                  |L1.338|
000152  2000              MOVS     r0,#0                 ;241
000154  e7f0              B        |L1.312|
;;;243    
                          ENDP

                  HED_FlashWriteWord_St PROC
;;;255    *************************************************/  
;;;256    unsigned int HED_FlashWriteWord_St (unsigned int FlashAddr, unsigned int DataValue)
000156  b570              PUSH     {r4-r6,lr}
;;;257    {
000158  4604              MOV      r4,r0
00015a  460d              MOV      r5,r1
;;;258    	__disable_irq();
00015c  b672              CPSID    i
;;;259     	wr_SDPKey();
00015e  f7fffffe          BL       wr_SDPKey
;;;260    	*(unsigned int *)FlashAddr = DataValue;
000162  6025              STR      r5,[r4,#0]
;;;261    	setWrMode(NVMEPKEY | NVM_WORD_WRITE);
000164  480c              LDR      r0,|L1.408|
000166  1d00              ADDS     r0,r0,#4
000168  f7fffffe          BL       setWrMode
;;;262    	__enable_irq();
00016c  b662              CPSIE    i
;;;263    
;;;264        if (*((unsigned int *)FlashAddr) != DataValue)
00016e  6820              LDR      r0,[r4,#0]
000170  42a8              CMP      r0,r5
000172  d002              BEQ      |L1.378|
;;;265        		return NVM_FAILED;
000174  2000              MOVS     r0,#0
000176  43c0              MVNS     r0,r0
                  |L1.376|
;;;266    	return NVM_SUCCESS;  
;;;267    }
000178  bd70              POP      {r4-r6,pc}
                  |L1.378|
00017a  2000              MOVS     r0,#0                 ;266
00017c  e7fc              B        |L1.376|
                          ENDP

00017e  0000              DCW      0x0000
                  |L1.384|
                          DCD      G_fCData1
                  |L1.388|
                          DCD      G_fCData2
                  |L1.392|
                          DCD      G_fCData3
                  |L1.396|
                          DCD      0xaa55aa55
                  |L1.400|
                          DCD      0xa5a55a5a
                  |L1.404|
                          DCD      0x50007080
                  |L1.408|
                          DCD      0x57af6c0a

                          AREA ||.data||, DATA, ALIGN=2

                  G_fCData1
                          DCD      0x00000000
                  G_fCData2
                          DCD      0x00000000
                  G_fCData3
                          DCD      0x00000000
