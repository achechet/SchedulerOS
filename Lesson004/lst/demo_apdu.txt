; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\demo_apdu.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\demo_apdu.d --cpu=SC000 --bi --apcs=interwork -O0 -I.\INC -I.\API -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\ARM\ARMSC000\Include --omf_browse=.\obj\demo_apdu.crf SRC\DEMO_APDU.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Get_APDUResp PROC
;;;50     *************************************************/
;;;51     void Get_APDUResp(void)
000000  48f8              LDR      r0,|L1.996|
;;;52     {
;;;53         *(G_APDUBuf + G_SendLen) = (INT8U)(G_SW1SW2 >> 8);
000002  8800              LDRH     r0,[r0,#0]  ; G_SW1SW2
000004  1200              ASRS     r0,r0,#8
000006  49f8              LDR      r1,|L1.1000|
000008  4af8              LDR      r2,|L1.1004|
00000a  8812              LDRH     r2,[r2,#0]  ; G_SendLen
00000c  5488              STRB     r0,[r1,r2]
;;;54         *(G_APDUBuf + G_SendLen + 1) = (INT8U)(G_SW1SW2 & 0xFF);
00000e  48f5              LDR      r0,|L1.996|
000010  7841              LDRB     r1,[r0,#1]  ; G_SW1SW2
000012  48f5              LDR      r0,|L1.1000|
000014  4af5              LDR      r2,|L1.1004|
000016  8812              LDRH     r2,[r2,#0]  ; G_SendLen
000018  1880              ADDS     r0,r0,r2
00001a  7041              STRB     r1,[r0,#1]
;;;55         G_SendLen += 2;
00001c  48f3              LDR      r0,|L1.1004|
00001e  8800              LDRH     r0,[r0,#0]  ; G_SendLen
000020  1c80              ADDS     r0,r0,#2
000022  49f2              LDR      r1,|L1.1004|
000024  8008              STRH     r0,[r1,#0]
;;;56     }
000026  4770              BX       lr
;;;57     /************************************************* 
                          ENDP

                  cmd_INSError PROC
;;;64     *************************************************/
;;;65     void cmd_INSError(void)
000028  206d              MOVS     r0,#0x6d
;;;66     {
;;;67     	G_SW1SW2 = 0x6D00;
00002a  0200              LSLS     r0,r0,#8
00002c  49ed              LDR      r1,|L1.996|
00002e  8008              STRH     r0,[r1,#0]
;;;68     }
000030  4770              BX       lr
;;;69     
                          ENDP

                  DemoCos_APDU_Dispatch PROC
;;;77     *************************************************/
;;;78     void DemoCos_APDU_Dispatch(void)
000032  b510              PUSH     {r4,lr}
;;;79     {
;;;80         INT8U i;
;;;81         
;;;82         G_SendLen = 0;
000034  2000              MOVS     r0,#0
000036  49ed              LDR      r1,|L1.1004|
000038  8008              STRH     r0,[r1,#0]
;;;83         
;;;84         for(i=0;;i++)
00003a  2400              MOVS     r4,#0
00003c  bf00              NOP      
                  |L1.62|
;;;85         {
;;;86         	if((CMD_INSList[i].ins == APDU_INS)||(CMD_INSList[i].ins == EOL))
00003e  00e0              LSLS     r0,r4,#3
000040  49eb              LDR      r1,|L1.1008|
000042  5c08              LDRB     r0,[r1,r0]
000044  49e8              LDR      r1,|L1.1000|
000046  7849              LDRB     r1,[r1,#1]  ; G_APDUBuf
000048  4288              CMP      r0,r1
00004a  d004              BEQ      |L1.86|
00004c  00e0              LSLS     r0,r4,#3
00004e  49e8              LDR      r1,|L1.1008|
000050  5c08              LDRB     r0,[r1,r0]
000052  28ff              CMP      r0,#0xff
000054  d107              BNE      |L1.102|
                  |L1.86|
;;;87         	{
;;;88         		CMD_INSList[i].func();
000056  00e1              LSLS     r1,r4,#3
000058  4ae5              LDR      r2,|L1.1008|
00005a  1889              ADDS     r1,r1,r2
00005c  6848              LDR      r0,[r1,#4]
00005e  4780              BLX      r0
;;;89                 Get_APDUResp();
000060  f7fffffe          BL       Get_APDUResp
;;;90         		break;
000064  e002              B        |L1.108|
                  |L1.102|
000066  1c60              ADDS     r0,r4,#1              ;84
000068  b2c4              UXTB     r4,r0                 ;84
00006a  e7e8              B        |L1.62|
                  |L1.108|
00006c  bf00              NOP      
;;;91         	}                           			
;;;92         }
;;;93     }
00006e  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  cmd_Symmetry_ALG PROC
;;;102    *************************************************/
;;;103    void cmd_Symmetry_ALG(void)
000070  b530              PUSH     {r4,r5,lr}
;;;104    {
000072  b0b5              SUB      sp,sp,#0xd4
;;;105        INT32U ret;
;;;106        
;;;107        DES_Parameters * Demo_DES_Param;
;;;108        DES_Parameters  Demo_DES_ParamVar;
;;;109        DES3_Parameters  Demo_3DES_Param;
;;;110    
;;;111    
;;;112        /************************************************* 
;;;113            DES/3DES/SSF33 standard data
;;;114        *************************************************/
;;;115        INT32U  std_DES_Key[4] = {0x53D6A7A9,0x0D38BC86,\
000074  4bdf              LDR      r3,|L1.1012|
000076  cb0f              LDM      r3,{r0-r3}
000078  ac23              ADD      r4,sp,#0x8c
00007a  c40f              STM      r4!,{r0-r3}
;;;116                                    0x13B88389,0x963E20CB};
;;;117        INT32U  std_DES_IV[2] = {0x3DCD8D1E,0x76F1233B};
00007c  49dd              LDR      r1,|L1.1012|
00007e  3110              ADDS     r1,r1,#0x10
000080  c903              LDM      r1,{r0,r1}
000082  9122              STR      r1,[sp,#0x88]
000084  9021              STR      r0,[sp,#0x84]
;;;118        INT32U  std_DES_InData[8] = {0xF0E5AC7F,0x803571B0,0xA7408E0C,0x378C05AE,\
000086  2220              MOVS     r2,#0x20
000088  49da              LDR      r1,|L1.1012|
00008a  3118              ADDS     r1,r1,#0x18
00008c  a819              ADD      r0,sp,#0x64
00008e  f7fffffe          BL       __aeabi_memcpy4
;;;119                                       0xE58732C7,0xCC28A34E,0x0B52EE7A,0x8214C162};
;;;120        
;;;121        INT32U  std_DES_ECB_EncData[8] = {0x1D1A9D5A,0x7BE7C2F0,0xDD3BFC0A,0x74DBA3C3,0x5DAFFB8C,0x87286F17,0xE36194F3,0x307DFAA3};
000092  2220              MOVS     r2,#0x20
000094  49d7              LDR      r1,|L1.1012|
000096  3138              ADDS     r1,r1,#0x38
000098  a811              ADD      r0,sp,#0x44
00009a  f7fffffe          BL       __aeabi_memcpy4
;;;122        INT32U  std_2Key3DES_CBC_EncData[8] = {0x8E507B1D,0x81EF13C6,0x56BCF427,0x8A35434D,0xA5DB5C40,0x04B9FE12,0x5A81FED3,0x82AC8DF7};                                          
00009e  2220              MOVS     r2,#0x20
0000a0  49d4              LDR      r1,|L1.1012|
0000a2  3158              ADDS     r1,r1,#0x58
0000a4  a809              ADD      r0,sp,#0x24
0000a6  f7fffffe          BL       __aeabi_memcpy4
;;;123    
;;;124    	INT32U	chkSumVar;
;;;125    	INT32U 	output[8];
;;;126         
;;;127        /*1. run DES ECB_ENC */
;;;128        //1-1.config DES struct para
;;;129        Demo_DES_Param = &Demo_DES_ParamVar;
0000aa  ac2e              ADD      r4,sp,#0xb8
;;;130        Demo_DES_Param->iDataPtr = std_DES_InData;
0000ac  a819              ADD      r0,sp,#0x64
0000ae  6020              STR      r0,[r4,#0]
;;;131        Demo_DES_Param->oDataPtr = output;
0000b0  4668              MOV      r0,sp
0000b2  6120              STR      r0,[r4,#0x10]
;;;132        Demo_DES_Param->DataLen = sizeof(std_DES_InData);
0000b4  2020              MOVS     r0,#0x20
0000b6  6060              STR      r0,[r4,#4]
;;;133        //Demo_DES_Param->IVPtr = std_DES_IV;
;;;134        Demo_DES_Param->iKeyPtr = std_DES_Key;
0000b8  a823              ADD      r0,sp,#0x8c
0000ba  60a0              STR      r0,[r4,#8]
;;;135        Demo_DES_Param->Type = ECB_ENCRYPT;
0000bc  2000              MOVS     r0,#0
0000be  7520              STRB     r0,[r4,#0x14]
;;;136    	Demo_DES_Param->paraChkSum = &chkSumVar;
0000c0  a808              ADD      r0,sp,#0x20
0000c2  61a0              STR      r0,[r4,#0x18]
;;;137        
;;;138        //1-2.run DES 
;;;139        ret = HED_DESBlock(Demo_DES_Param);
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       HED_DESBlock
0000ca  4605              MOV      r5,r0
;;;140        if((ret != DES_SUCCESS) || (chkSumVar != ((unsigned int)Demo_DES_Param->oDataPtr+Demo_DES_Param->DataLen)))
0000cc  48ca              LDR      r0,|L1.1016|
0000ce  4285              CMP      r5,r0
0000d0  d105              BNE      |L1.222|
0000d2  6861              LDR      r1,[r4,#4]
0000d4  6920              LDR      r0,[r4,#0x10]
0000d6  1840              ADDS     r0,r0,r1
0000d8  9908              LDR      r1,[sp,#0x20]
0000da  4288              CMP      r0,r1
0000dc  d004              BEQ      |L1.232|
                  |L1.222|
;;;141        {
;;;142            G_SW1SW2 = 0x6F01;
0000de  48c7              LDR      r0,|L1.1020|
0000e0  49c0              LDR      r1,|L1.996|
0000e2  8008              STRH     r0,[r1,#0]
                  |L1.228|
;;;143            return;
;;;144        }
;;;145        
;;;146        //1-3.check DES data
;;;147        ret = memcmp(Demo_DES_Param->oDataPtr, std_DES_ECB_EncData, sizeof(std_DES_ECB_EncData));
;;;148        if(ret != 0)
;;;149        {
;;;150            G_SW1SW2 = 0x6F02;
;;;151            return;
;;;152        } 
;;;153        
;;;154        /*2. run 3DES 2KEY CBC ENC /DEC */
;;;155        //2-1.config 3DES struct para
;;;156        Demo_3DES_Param.iDataPtr = std_DES_InData;
;;;157        Demo_3DES_Param.oDataPtr = output;
;;;158        Demo_3DES_Param.DataLen = sizeof(std_DES_InData);
;;;159        Demo_3DES_Param.IVPtr = std_DES_IV;
;;;160        Demo_3DES_Param.iKeyPtr = std_DES_Key;
;;;161        Demo_3DES_Param.Type = CBC_ENCRYPT;
;;;162    	Demo_3DES_Param.paraChkSum = &chkSumVar;
;;;163        
;;;164        //2-2.run 3DES 
;;;165        ret = HED_DES3Block(&Demo_3DES_Param);
;;;166        if((ret != DES_SUCCESS) || (chkSumVar != ((unsigned int)Demo_3DES_Param.oDataPtr+Demo_3DES_Param.DataLen)))
;;;167        {
;;;168            G_SW1SW2 = 0x6F03;
;;;169            return;
;;;170        }
;;;171        
;;;172        //2-3.check 3DES data
;;;173        ret = memcmp(Demo_3DES_Param.oDataPtr, std_2Key3DES_CBC_EncData, sizeof(std_2Key3DES_CBC_EncData));
;;;174        if(ret != 0)
;;;175        {
;;;176            G_SW1SW2 = 0x6F04;
;;;177            return;
;;;178        } 
;;;179        
;;;180        //2-4.check 3DES data Dec
;;;181        Demo_3DES_Param.iDataPtr = std_2Key3DES_CBC_EncData;
;;;182        Demo_3DES_Param.oDataPtr = output;
;;;183        Demo_3DES_Param.DataLen = sizeof(std_2Key3DES_CBC_EncData);
;;;184        Demo_3DES_Param.IVPtr = std_DES_IV;
;;;185        Demo_3DES_Param.iKeyPtr = std_DES_Key;
;;;186        Demo_3DES_Param.Type = CBC_DECRYPT;
;;;187    	Demo_3DES_Param.paraChkSum = &chkSumVar;
;;;188        
;;;189        ret = HED_DES3Block(&Demo_3DES_Param);
;;;190    	if((ret != DES_SUCCESS) || (chkSumVar != ((unsigned int)Demo_3DES_Param.oDataPtr+Demo_3DES_Param.DataLen)))
;;;191        {
;;;192            G_SW1SW2 = 0x6F05;
;;;193            return;
;;;194        }
;;;195        ret = memcmp(Demo_3DES_Param.oDataPtr, std_DES_InData, sizeof(std_DES_InData));
;;;196        if(ret != 0)
;;;197        {
;;;198            G_SW1SW2 = 0x6F06;
;;;199            return;
;;;200        }    
;;;201        
;;;202        //return
;;;203        G_SW1SW2 = 0x9000;       
;;;204    }
0000e4  b035              ADD      sp,sp,#0xd4
0000e6  bd30              POP      {r4,r5,pc}
                  |L1.232|
0000e8  2220              MOVS     r2,#0x20              ;147
0000ea  a911              ADD      r1,sp,#0x44           ;147
0000ec  6920              LDR      r0,[r4,#0x10]         ;147
0000ee  f7fffffe          BL       memcmp
0000f2  4605              MOV      r5,r0                 ;147
0000f4  2d00              CMP      r5,#0                 ;148
0000f6  d004              BEQ      |L1.258|
0000f8  48c0              LDR      r0,|L1.1020|
0000fa  1c40              ADDS     r0,r0,#1              ;150
0000fc  49b9              LDR      r1,|L1.996|
0000fe  8008              STRH     r0,[r1,#0]            ;150
000100  e7f0              B        |L1.228|
                  |L1.258|
000102  a819              ADD      r0,sp,#0x64           ;156
000104  9027              STR      r0,[sp,#0x9c]         ;156
000106  4668              MOV      r0,sp                 ;157
000108  902b              STR      r0,[sp,#0xac]         ;157
00010a  2020              MOVS     r0,#0x20              ;158
00010c  9028              STR      r0,[sp,#0xa0]         ;158
00010e  a821              ADD      r0,sp,#0x84           ;159
000110  902a              STR      r0,[sp,#0xa8]         ;159
000112  a823              ADD      r0,sp,#0x8c           ;160
000114  9029              STR      r0,[sp,#0xa4]         ;160
000116  2020              MOVS     r0,#0x20              ;161
000118  a928              ADD      r1,sp,#0xa0           ;161
00011a  7408              STRB     r0,[r1,#0x10]         ;161
00011c  a808              ADD      r0,sp,#0x20           ;162
00011e  902d              STR      r0,[sp,#0xb4]         ;162
000120  a827              ADD      r0,sp,#0x9c           ;165
000122  f7fffffe          BL       HED_DES3Block
000126  4605              MOV      r5,r0                 ;165
000128  48b3              LDR      r0,|L1.1016|
00012a  4285              CMP      r5,r0                 ;166
00012c  d105              BNE      |L1.314|
00012e  9928              LDR      r1,[sp,#0xa0]         ;166
000130  982b              LDR      r0,[sp,#0xac]         ;166
000132  1840              ADDS     r0,r0,r1              ;166
000134  9908              LDR      r1,[sp,#0x20]         ;166
000136  4288              CMP      r0,r1                 ;166
000138  d004              BEQ      |L1.324|
                  |L1.314|
00013a  48b0              LDR      r0,|L1.1020|
00013c  1c80              ADDS     r0,r0,#2              ;168
00013e  49a9              LDR      r1,|L1.996|
000140  8008              STRH     r0,[r1,#0]            ;168
000142  e7cf              B        |L1.228|
                  |L1.324|
000144  2220              MOVS     r2,#0x20              ;173
000146  a909              ADD      r1,sp,#0x24           ;173
000148  982b              LDR      r0,[sp,#0xac]         ;173
00014a  f7fffffe          BL       memcmp
00014e  4605              MOV      r5,r0                 ;173
000150  2d00              CMP      r5,#0                 ;174
000152  d004              BEQ      |L1.350|
000154  48a9              LDR      r0,|L1.1020|
000156  1cc0              ADDS     r0,r0,#3              ;176
000158  49a2              LDR      r1,|L1.996|
00015a  8008              STRH     r0,[r1,#0]            ;176
00015c  e7c2              B        |L1.228|
                  |L1.350|
00015e  a809              ADD      r0,sp,#0x24           ;181
000160  9027              STR      r0,[sp,#0x9c]         ;181
000162  4668              MOV      r0,sp                 ;182
000164  902b              STR      r0,[sp,#0xac]         ;182
000166  2020              MOVS     r0,#0x20              ;183
000168  9028              STR      r0,[sp,#0xa0]         ;183
00016a  a821              ADD      r0,sp,#0x84           ;184
00016c  902a              STR      r0,[sp,#0xa8]         ;184
00016e  a823              ADD      r0,sp,#0x8c           ;185
000170  9029              STR      r0,[sp,#0xa4]         ;185
000172  2060              MOVS     r0,#0x60              ;186
000174  a928              ADD      r1,sp,#0xa0           ;186
000176  7408              STRB     r0,[r1,#0x10]         ;186
000178  a808              ADD      r0,sp,#0x20           ;187
00017a  902d              STR      r0,[sp,#0xb4]         ;187
00017c  a827              ADD      r0,sp,#0x9c           ;189
00017e  f7fffffe          BL       HED_DES3Block
000182  4605              MOV      r5,r0                 ;189
000184  489c              LDR      r0,|L1.1016|
000186  4285              CMP      r5,r0                 ;190
000188  d105              BNE      |L1.406|
00018a  9928              LDR      r1,[sp,#0xa0]         ;190
00018c  982b              LDR      r0,[sp,#0xac]         ;190
00018e  1840              ADDS     r0,r0,r1              ;190
000190  9908              LDR      r1,[sp,#0x20]         ;190
000192  4288              CMP      r0,r1                 ;190
000194  d004              BEQ      |L1.416|
                  |L1.406|
000196  4899              LDR      r0,|L1.1020|
000198  1d00              ADDS     r0,r0,#4              ;192
00019a  4992              LDR      r1,|L1.996|
00019c  8008              STRH     r0,[r1,#0]            ;192
00019e  e7a1              B        |L1.228|
                  |L1.416|
0001a0  2220              MOVS     r2,#0x20              ;195
0001a2  a919              ADD      r1,sp,#0x64           ;195
0001a4  982b              LDR      r0,[sp,#0xac]         ;195
0001a6  f7fffffe          BL       memcmp
0001aa  4605              MOV      r5,r0                 ;195
0001ac  2d00              CMP      r5,#0                 ;196
0001ae  d004              BEQ      |L1.442|
0001b0  4892              LDR      r0,|L1.1020|
0001b2  1d40              ADDS     r0,r0,#5              ;198
0001b4  498b              LDR      r1,|L1.996|
0001b6  8008              STRH     r0,[r1,#0]            ;198
0001b8  e794              B        |L1.228|
                  |L1.442|
0001ba  2009              MOVS     r0,#9                 ;203
0001bc  0300              LSLS     r0,r0,#12             ;203
0001be  4989              LDR      r1,|L1.996|
0001c0  8008              STRH     r0,[r1,#0]            ;203
0001c2  bf00              NOP      
0001c4  e78e              B        |L1.228|
;;;205    /************************************************* 
                          ENDP

                  cmd_CRC_Calculate PROC
;;;212    *************************************************/
;;;213    void cmd_CRC_Calculate(void)
0001c6  b510              PUSH     {r4,lr}
;;;214    {
0001c8  b0ff              SUB      sp,sp,#0x1fc
0001ca  b089              SUB      sp,sp,#0x24
;;;215        INT16U ret;
;;;216        INT8U crcXInput[261];
;;;217    
;;;218        /************************************************* 
;;;219            CRC16 standard data
;;;220        *************************************************/
;;;221        const INT8U crcFInput[261] = {0xBA,0x37,0xB1,0x5A,0xCF,0xF7,0x7C,0x7D,0x0C,0xFD,0xA4,0x06,0xC2,0xA6,0x6D,0xD8,0x35,0x02,0x8D,0x5C,0x28,0x4A,0x57,0x1B,0xA7,0xA0,0x25,0x9D,0x16,0x08,0x06,0x83,\
0001cc  22ff              MOVS     r2,#0xff
0001ce  3209              ADDS     r2,r2,#9
0001d0  4988              LDR      r1,|L1.1012|
0001d2  3178              ADDS     r1,r1,#0x78
0001d4  a804              ADD      r0,sp,#0x10
0001d6  f7fffffe          BL       __aeabi_memcpy4
;;;222                                  0x79,0xA5,0xA7,0xE3,0x04,0x37,0x85,0xE2,0xE4,0xD3,0x52,0x96,0x4E,0xE3,0xA6,0x1D,0xC8,0x60,0xE9,0xF7,0xB6,0x4C,0x7F,0xAB,0x26,0x74,0x34,0x98,0xDF,0x66,0xE9,0x1A,\
;;;223                                  0xA6,0xB0,0x7F,0xE0,0xD1,0x59,0x02,0x8B,0x10,0xA3,0x18,0x8A,0x7A,0x01,0xAA,0x33,0xD5,0x54,0xD3,0x24,0x29,0x6D,0x08,0xDB,0x86,0xBE,0x87,0x92,0x13,0x61,0x04,0x5E,\
;;;224                                  0x59,0x4D,0x90,0x8A,0xD0,0xD6,0xCC,0x30,0xA9,0x64,0x4D,0x18,0xDC,0x76,0x51,0xD3,0x74,0xD9,0xA2,0x19,0x19,0x23,0xC9,0x62,0xDD,0x75,0x75,0xC2,0x4A,0x70,0x2D,0x09,\
;;;225                                  0xAA,0x76,0x33,0x19,0x97,0x24,0xBA,0x88,0xC5,0x0E,0x4A,0x79,0x0E,0xBC,0x72,0xB5,0xBD,0xE4,0xAF,0x10,0x1E,0xE8,0x9A,0xF9,0x44,0x91,0x57,0x61,0x1C,0x0B,0x3C,0xD1,\
;;;226                                  0xB1,0x22,0xC0,0xC5,0xC0,0xBD,0xA5,0x4C,0x7E,0x9A,0x67,0xE4,0xA6,0x4B,0xE6,0x91,0xC8,0x6F,0x51,0x3F,0xD0,0x33,0x54,0x58,0xD4,0x0A,0x85,0xA8,0x21,0xAA,0x0A,0x6F,\
;;;227                                  0x86,0x49,0x8E,0xC5,0xE1,0x18,0x64,0x34,0xEA,0xFF,0xFB,0x93,0x3E,0x99,0x84,0x1F,0xAE,0x71,0xE1,0xDF,0xC7,0x7C,0xCF,0x37,0xA3,0xD9,0x56,0xCC,0xF1,0xC6,0x6F,0x9A,\
;;;228                                  0x42,0xE4,0xF5,0x52,0x94,0xAE,0xD0,0xF8,0x23,0x35,0x5F,0xBC,0x6D,0x20,0x25,0x17,0x85,0xE2,0xB6,0x27,0x9B,0x3C,0xE2,0x4E,0xCB,0xF5,0x22,0x08,0x24,0xD6,0x42,0x0C,\
;;;229                                  0xFB,0xEA,0x4E,0xA5,0x70}; 
;;;230        const INT8U crcFInput2[13] = {0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x11,0x22,0x33,0x44};                                
0001da  a389              ADR      r3,|L1.1024|
0001dc  cb0f              LDM      r3,{r0-r3}
0001de  466c              MOV      r4,sp
0001e0  c40f              STM      r4!,{r0-r3}
;;;231        
;;;232        #define std_CRCOutput_6363          0x8AA0
;;;233        #define std_CRCOutput_FFFF          0x2152
;;;234        #define std_CRCOutput_JAVA_TCK      0x3A2F
;;;235        
;;;236        SYSCLKEN |= BIT0;//enable CRC IP's CLK
0001e2  488b              LDR      r0,|L1.1040|
0001e4  6800              LDR      r0,[r0,#0]
0001e6  2101              MOVS     r1,#1
0001e8  4308              ORRS     r0,r0,r1
0001ea  4989              LDR      r1,|L1.1040|
0001ec  6008              STR      r0,[r1,#0]
;;;237        memcpy(crcXInput, crcFInput, sizeof(crcXInput));
0001ee  22ff              MOVS     r2,#0xff
0001f0  3209              ADDS     r2,r2,#9
0001f2  a904              ADD      r1,sp,#0x10
0001f4  a846              ADD      r0,sp,#0x118
0001f6  f7fffffe          BL       __aeabi_memcpy4
;;;238            
;;;239        ret = HED_CRC16(0x6363, sizeof(crcXInput), crcXInput,2);
0001fa  2302              MOVS     r3,#2
0001fc  aa46              ADD      r2,sp,#0x118
0001fe  21ff              MOVS     r1,#0xff
000200  3106              ADDS     r1,#6
000202  4884              LDR      r0,|L1.1044|
000204  f7fffffe          BL       HED_CRC16
000208  4604              MOV      r4,r0
;;;240        if (ret != std_CRCOutput_6363)
00020a  4883              LDR      r0,|L1.1048|
00020c  4284              CMP      r4,r0
00020e  d005              BEQ      |L1.540|
;;;241        {
;;;242            G_SW1SW2 = 0x6F01;
000210  487a              LDR      r0,|L1.1020|
000212  4974              LDR      r1,|L1.996|
000214  8008              STRH     r0,[r1,#0]
                  |L1.534|
;;;243            return;
;;;244        }
;;;245            
;;;246        ret = HED_CRC16(0xFFFF, sizeof(crcFInput), (INT8U *)crcFInput,2);
;;;247        if ((INT16U)(~ret) != std_CRCOutput_FFFF)
;;;248        {
;;;249            G_SW1SW2 = 0x6F02;
;;;250            return;
;;;251        }
;;;252        
;;;253        ret = HED_CRC16(0xFFFF, sizeof(crcFInput2), (INT8U *)crcFInput2,1);//fit to JC API's requirement,can pass TCK verify
;;;254        if ((INT16U)(~ret) != std_CRCOutput_JAVA_TCK)
;;;255        {
;;;256            G_SW1SW2 = 0x6F03;
;;;257            return;
;;;258        }
;;;259        
;;;260        G_SW1SW2 = 0x9000;
;;;261    }
000216  b07f              ADD      sp,sp,#0x1fc
000218  b009              ADD      sp,sp,#0x24
00021a  bd10              POP      {r4,pc}
                  |L1.540|
00021c  2302              MOVS     r3,#2                 ;246
00021e  aa04              ADD      r2,sp,#0x10           ;246
000220  21ff              MOVS     r1,#0xff              ;246
000222  3106              ADDS     r1,#6                 ;246
000224  487d              LDR      r0,|L1.1052|
000226  f7fffffe          BL       HED_CRC16
00022a  4604              MOV      r4,r0                 ;246
00022c  43e0              MVNS     r0,r4                 ;247
00022e  b280              UXTH     r0,r0                 ;247
000230  497b              LDR      r1,|L1.1056|
000232  4288              CMP      r0,r1                 ;247
000234  d004              BEQ      |L1.576|
000236  4871              LDR      r0,|L1.1020|
000238  1c40              ADDS     r0,r0,#1              ;249
00023a  496a              LDR      r1,|L1.996|
00023c  8008              STRH     r0,[r1,#0]            ;249
00023e  e7ea              B        |L1.534|
                  |L1.576|
000240  2301              MOVS     r3,#1                 ;253
000242  466a              MOV      r2,sp                 ;253
000244  210d              MOVS     r1,#0xd               ;253
000246  4875              LDR      r0,|L1.1052|
000248  f7fffffe          BL       HED_CRC16
00024c  4604              MOV      r4,r0                 ;253
00024e  43e0              MVNS     r0,r4                 ;254
000250  b280              UXTH     r0,r0                 ;254
000252  4974              LDR      r1,|L1.1060|
000254  4288              CMP      r0,r1                 ;254
000256  d004              BEQ      |L1.610|
000258  4868              LDR      r0,|L1.1020|
00025a  1c80              ADDS     r0,r0,#2              ;256
00025c  4961              LDR      r1,|L1.996|
00025e  8008              STRH     r0,[r1,#0]            ;256
000260  e7d9              B        |L1.534|
                  |L1.610|
000262  2009              MOVS     r0,#9                 ;260
000264  0300              LSLS     r0,r0,#12             ;260
000266  495f              LDR      r1,|L1.996|
000268  8008              STRH     r0,[r1,#0]            ;260
00026a  bf00              NOP      
00026c  e7d3              B        |L1.534|
;;;262    
                          ENDP

                  cmd_GET_INFO PROC
;;;270    *************************************************/
;;;271    void cmd_GET_INFO(void)
00026e  b570              PUSH     {r4-r6,lr}
;;;272    {
;;;273        INT8U p3,ins;
;;;274        
;;;275        /*no check P3 ,user can add it */    
;;;276        p3 = APDU_P3;
000270  485d              LDR      r0,|L1.1000|
000272  7905              LDRB     r5,[r0,#4]  ; G_APDUBuf
;;;277    	ins = APDU_INS;
000274  7844              LDRB     r4,[r0,#1]  ; G_APDUBuf
;;;278            
;;;279        /* according to P1, do*/
;;;280        switch (APDU_P1)
000276  7880              LDRB     r0,[r0,#2]  ; G_APDUBuf
000278  2801              CMP      r0,#1
00027a  d004              BEQ      |L1.646|
00027c  2802              CMP      r0,#2
00027e  d007              BEQ      |L1.656|
000280  2803              CMP      r0,#3
000282  d10d              BNE      |L1.672|
000284  e008              B        |L1.664|
                  |L1.646|
;;;281        {           
;;;282            case 0x01:
;;;283                HED_GetRandom(G_APDUBuf,8);
000286  2108              MOVS     r1,#8
000288  4857              LDR      r0,|L1.1000|
00028a  f7fffffe          BL       HED_GetRandom
;;;284                break;
00028e  e00c              B        |L1.682|
                  |L1.656|
;;;285            
;;;286            case 0x02:
;;;287                HED_GetFactoryCode(G_APDUBuf);
000290  4855              LDR      r0,|L1.1000|
000292  f7fffffe          BL       HED_GetFactoryCode
;;;288                break;        
000296  e008              B        |L1.682|
                  |L1.664|
;;;289                
;;;290            case 0x03:
;;;291                HED_GetChipId(G_APDUBuf);
000298  4853              LDR      r0,|L1.1000|
00029a  f7fffffe          BL       HED_GetChipId
;;;292                break;
00029e  e004              B        |L1.682|
                  |L1.672|
;;;293                
;;;294            default:
;;;295                G_SW1SW2 = 0x6F00;
0002a0  206f              MOVS     r0,#0x6f
0002a2  0200              LSLS     r0,r0,#8
0002a4  494f              LDR      r1,|L1.996|
0002a6  8008              STRH     r0,[r1,#0]
                  |L1.680|
;;;296                return;    
;;;297        }	
;;;298    	
;;;299    	DemoCos_SendINS(ins);//send INS       
;;;300        G_SendLen = (p3 == 0 ? 256 : p3);
;;;301        G_SW1SW2 = 0x9000;    
;;;302    }
0002a8  bd70              POP      {r4-r6,pc}
                  |L1.682|
0002aa  bf00              NOP                            ;284
0002ac  4620              MOV      r0,r4                 ;299
0002ae  f7fffffe          BL       DemoCos_SendINS
0002b2  2d00              CMP      r5,#0                 ;300
0002b4  d102              BNE      |L1.700|
0002b6  20ff              MOVS     r0,#0xff              ;300
0002b8  3001              ADDS     r0,#1                 ;300
0002ba  e000              B        |L1.702|
                  |L1.700|
0002bc  4628              MOV      r0,r5                 ;300
                  |L1.702|
0002be  494b              LDR      r1,|L1.1004|
0002c0  8008              STRH     r0,[r1,#0]            ;300
0002c2  2009              MOVS     r0,#9                 ;301
0002c4  0300              LSLS     r0,r0,#12             ;301
0002c6  4947              LDR      r1,|L1.996|
0002c8  8008              STRH     r0,[r1,#0]            ;301
0002ca  bf00              NOP      
0002cc  e7ec              B        |L1.680|
;;;303    /************************************************* 
                          ENDP

                  cmd_NVM_Erase PROC
;;;313    #define SECTOR_SIZE				(PAGE_SIZE*8)
;;;314    void cmd_NVM_Erase(void)
0002ce  b510              PUSH     {r4,lr}
;;;315    {   
;;;316    	
;;;317    	openSend60();
0002d0  f7fffffe          BL       openSend60
;;;318    	/* according to P1, do*/
;;;319        switch (APDU_P1)
0002d4  4844              LDR      r0,|L1.1000|
0002d6  7880              LDRB     r0,[r0,#2]  ; G_APDUBuf
0002d8  2801              CMP      r0,#1
0002da  d002              BEQ      |L1.738|
0002dc  2802              CMP      r0,#2
0002de  d11b              BNE      |L1.792|
0002e0  e011              B        |L1.774|
                  |L1.738|
;;;320        {           
;;;321            case 0x01:
;;;322                if(HED_FlashErasePage_St(DEMO_ERWR_START_ADDR + APDU_P2 * PAGE_SIZE) != 0)
0002e2  4941              LDR      r1,|L1.1000|
0002e4  78c9              LDRB     r1,[r1,#3]  ; G_APDUBuf
0002e6  0249              LSLS     r1,r1,#9
0002e8  2203              MOVS     r2,#3
0002ea  0452              LSLS     r2,r2,#17
0002ec  1888              ADDS     r0,r1,r2
0002ee  f7fffffe          BL       HED_FlashErasePage_St
0002f2  2800              CMP      r0,#0
0002f4  d006              BEQ      |L1.772|
;;;323    			{
;;;324    				G_SW1SW2 = 0x6A80;
0002f6  20d5              MOVS     r0,#0xd5
0002f8  01c0              LSLS     r0,r0,#7
0002fa  493a              LDR      r1,|L1.996|
0002fc  8008              STRH     r0,[r1,#0]
;;;325    				closeSend60();
0002fe  f7fffffe          BL       closeSend60
                  |L1.770|
;;;326    				return;
;;;327    			}
;;;328                break;       
;;;329            case 0x02:
;;;330                HED_FlashEraseSectorNoChk_St(DEMO_ERWR_START_ADDR + APDU_P2 * SECTOR_SIZE);
;;;331                break;                  
;;;332            default:
;;;333                G_SW1SW2 = 0x6F00;
;;;334    			closeSend60();
;;;335                return;    
;;;336        }
;;;337        G_SW1SW2 = 0x9000;
;;;338    	closeSend60();
;;;339    }
000302  bd10              POP      {r4,pc}
                  |L1.772|
000304  e00f              B        |L1.806|
                  |L1.774|
000306  4938              LDR      r1,|L1.1000|
000308  78c9              LDRB     r1,[r1,#3]            ;330  ; G_APDUBuf
00030a  0309              LSLS     r1,r1,#12             ;330
00030c  2203              MOVS     r2,#3                 ;330
00030e  0452              LSLS     r2,r2,#17             ;330
000310  1888              ADDS     r0,r1,r2              ;330
000312  f7fffffe          BL       HED_FlashEraseSectorNoChk_St
000316  e006              B        |L1.806|
                  |L1.792|
000318  206f              MOVS     r0,#0x6f              ;333
00031a  0200              LSLS     r0,r0,#8              ;333
00031c  4931              LDR      r1,|L1.996|
00031e  8008              STRH     r0,[r1,#0]            ;333
000320  f7fffffe          BL       closeSend60
000324  e7ed              B        |L1.770|
                  |L1.806|
000326  bf00              NOP                            ;328
000328  2009              MOVS     r0,#9                 ;337
00032a  0300              LSLS     r0,r0,#12             ;337
00032c  492d              LDR      r1,|L1.996|
00032e  8008              STRH     r0,[r1,#0]            ;337
000330  f7fffffe          BL       closeSend60
000334  bf00              NOP      
000336  e7e4              B        |L1.770|
;;;340    
                          ENDP

                  cmd_NVM_Write PROC
;;;348    *************************************************/
;;;349    void cmd_NVM_Write(void)
000338  b530              PUSH     {r4,r5,lr}
;;;350    {   
00033a  b0ff              SUB      sp,sp,#0x1fc
00033c  b082              SUB      sp,sp,#8
;;;351    	INT32U writeDataBuf[128];
;;;352    	INT32U data, i;
;;;353    	
;;;354    	openSend60();
00033e  f7fffffe          BL       openSend60
;;;355    	/* according to P1, do*/
;;;356        switch (APDU_P1)
000342  4829              LDR      r0,|L1.1000|
000344  7880              LDRB     r0,[r0,#2]  ; G_APDUBuf
000346  2801              CMP      r0,#1
000348  d002              BEQ      |L1.848|
00034a  2802              CMP      r0,#2
00034c  d16d              BNE      |L1.1066|
00034e  e01c              B        |L1.906|
                  |L1.848|
;;;357        {           
;;;358            case 0x01:
;;;359    			for(i = 0; i < 128; i++)
000350  2400              MOVS     r4,#0
000352  e003              B        |L1.860|
                  |L1.852|
;;;360    			writeDataBuf[i] = i;
000354  00a0              LSLS     r0,r4,#2
000356  a901              ADD      r1,sp,#4
000358  500c              STR      r4,[r1,r0]
00035a  1c64              ADDS     r4,r4,#1              ;359
                  |L1.860|
00035c  2c80              CMP      r4,#0x80              ;359
00035e  d3f9              BCC      |L1.852|
;;;361                if(HED_FlashWritePage_St (DEMO_ERWR_START_ADDR + APDU_P2 * PAGE_SIZE, writeDataBuf) != 0)
000360  4921              LDR      r1,|L1.1000|
000362  78c9              LDRB     r1,[r1,#3]  ; G_APDUBuf
000364  0249              LSLS     r1,r1,#9
000366  2203              MOVS     r2,#3
000368  0452              LSLS     r2,r2,#17
00036a  1888              ADDS     r0,r1,r2
00036c  a901              ADD      r1,sp,#4
00036e  f7fffffe          BL       HED_FlashWritePage_St
000372  2800              CMP      r0,#0
000374  d008              BEQ      |L1.904|
;;;362    			{
;;;363    				G_SW1SW2 = 0x6A80;	
000376  20d5              MOVS     r0,#0xd5
000378  01c0              LSLS     r0,r0,#7
00037a  491a              LDR      r1,|L1.996|
00037c  8008              STRH     r0,[r1,#0]
;;;364    				closeSend60();
00037e  f7fffffe          BL       closeSend60
                  |L1.898|
;;;365    				return;
;;;366    			}
;;;367    			break;
;;;368            case 0x02:
;;;369    			DemoCos_SendINS(APDU_INS);//send INS
;;;370    			HED_T0_ReceiveNBytesRam(G_APDUBuf+5, APDU_P3);
;;;371    			data = (G_APDUBuf[7]<<24) + (G_APDUBuf[8]<<16) + (G_APDUBuf[9]<<8) + G_APDUBuf[10];
;;;372                if(HED_FlashWriteWord_St (DEMO_ERWR_START_ADDR+(G_APDUBuf[5]<<8)+G_APDUBuf[6], data) != 0)
;;;373    			{
;;;374    				G_SW1SW2 = 0x6A80;
;;;375    				closeSend60();
;;;376    				return;
;;;377    			}
;;;378    			break;
;;;379            default:
;;;380                G_SW1SW2 = 0x6F00;
;;;381    			closeSend60();
;;;382                return;    
;;;383        }
;;;384        G_SW1SW2 = 0x9000;
;;;385    	closeSend60();
;;;386    }
000382  b07f              ADD      sp,sp,#0x1fc
000384  b002              ADD      sp,sp,#8
000386  bd30              POP      {r4,r5,pc}
                  |L1.904|
000388  e056              B        |L1.1080|
                  |L1.906|
00038a  4917              LDR      r1,|L1.1000|
00038c  7848              LDRB     r0,[r1,#1]            ;369  ; G_APDUBuf
00038e  f7fffffe          BL       DemoCos_SendINS
000392  4815              LDR      r0,|L1.1000|
000394  7901              LDRB     r1,[r0,#4]            ;370  ; G_APDUBuf
000396  1d40              ADDS     r0,r0,#5              ;370
000398  f7fffffe          BL       HED_T0_ReceiveNBytesRam
00039c  4812              LDR      r0,|L1.1000|
00039e  79c0              LDRB     r0,[r0,#7]            ;371  ; G_APDUBuf
0003a0  0600              LSLS     r0,r0,#24             ;371
0003a2  4911              LDR      r1,|L1.1000|
0003a4  7a09              LDRB     r1,[r1,#8]            ;371  ; G_APDUBuf
0003a6  0409              LSLS     r1,r1,#16             ;371
0003a8  1840              ADDS     r0,r0,r1              ;371
0003aa  490f              LDR      r1,|L1.1000|
0003ac  7a49              LDRB     r1,[r1,#9]            ;371  ; G_APDUBuf
0003ae  0209              LSLS     r1,r1,#8              ;371
0003b0  1840              ADDS     r0,r0,r1              ;371
0003b2  490d              LDR      r1,|L1.1000|
0003b4  7a89              LDRB     r1,[r1,#0xa]          ;371  ; G_APDUBuf
0003b6  1845              ADDS     r5,r0,r1              ;371
0003b8  490b              LDR      r1,|L1.1000|
0003ba  7949              LDRB     r1,[r1,#5]            ;372  ; G_APDUBuf
0003bc  0209              LSLS     r1,r1,#8              ;372
0003be  2203              MOVS     r2,#3                 ;372
0003c0  0452              LSLS     r2,r2,#17             ;372
0003c2  1889              ADDS     r1,r1,r2              ;372
0003c4  4a08              LDR      r2,|L1.1000|
0003c6  7992              LDRB     r2,[r2,#6]            ;372  ; G_APDUBuf
0003c8  1888              ADDS     r0,r1,r2              ;372
0003ca  4629              MOV      r1,r5                 ;372
0003cc  f7fffffe          BL       HED_FlashWriteWord_St
0003d0  2800              CMP      r0,#0                 ;372
0003d2  d029              BEQ      |L1.1064|
0003d4  20d5              MOVS     r0,#0xd5              ;374
0003d6  01c0              LSLS     r0,r0,#7              ;374
0003d8  4902              LDR      r1,|L1.996|
0003da  8008              STRH     r0,[r1,#0]            ;374
0003dc  f7fffffe          BL       closeSend60
0003e0  e7cf              B        |L1.898|
0003e2  e022              B        |L1.1066|
                  |L1.996|
                          DCD      G_SW1SW2
                  |L1.1000|
                          DCD      G_APDUBuf
                  |L1.1004|
                          DCD      G_SendLen
                  |L1.1008|
                          DCD      CMD_INSList
                  |L1.1012|
                          DCD      ||.constdata||+0x38
                  |L1.1016|
                          DCD      0xb7c8d9ea
                  |L1.1020|
                          DCD      0x00006f01
                  |L1.1024|
000400  31323334          DCB      "123456789",17,"""3D",0
000404  35363738
000408  39112233
00040c  4400    
00040e  00                DCB      0
00040f  00                DCB      0
                  |L1.1040|
                          DCD      0x50007200
                  |L1.1044|
                          DCD      0x00006363
                  |L1.1048|
                          DCD      0x00008aa0
                  |L1.1052|
                          DCD      0x0000ffff
                  |L1.1056|
                          DCD      0x00002152
                  |L1.1060|
                          DCD      0x00003a2f
                  |L1.1064|
000428  e006              B        |L1.1080|
                  |L1.1066|
00042a  206f              MOVS     r0,#0x6f              ;380
00042c  0200              LSLS     r0,r0,#8              ;380
00042e  4919              LDR      r1,|L1.1172|
000430  8008              STRH     r0,[r1,#0]            ;380
000432  f7fffffe          BL       closeSend60
000436  e7a4              B        |L1.898|
                  |L1.1080|
000438  bf00              NOP                            ;367
00043a  2009              MOVS     r0,#9                 ;384
00043c  0300              LSLS     r0,r0,#12             ;384
00043e  4915              LDR      r1,|L1.1172|
000440  8008              STRH     r0,[r1,#0]            ;384
000442  f7fffffe          BL       closeSend60
000446  bf00              NOP      
000448  e79b              B        |L1.898|
;;;387    
                          ENDP

                  cmd_Loader_Resume PROC
;;;395    *************************************************/
;;;396    void cmd_Loader_Resume(void)
00044a  b570              PUSH     {r4-r6,lr}
;;;397    { 
;;;398    	INT32U i, *loaderVecPtr;
;;;399    
;;;400    	if(HED_FlashErasePage_St(0) != 0)
00044c  2000              MOVS     r0,#0
00044e  f7fffffe          BL       HED_FlashErasePage_St
000452  2800              CMP      r0,#0
000454  d004              BEQ      |L1.1120|
;;;401    	{
;;;402    		G_SW1SW2 = 0x6A80;
000456  20d5              MOVS     r0,#0xd5
000458  01c0              LSLS     r0,r0,#7
00045a  490e              LDR      r1,|L1.1172|
00045c  8008              STRH     r0,[r1,#0]
                  |L1.1118|
;;;403    		return;
;;;404    	}
;;;405    	
;;;406    	loaderVecPtr = (INT32U *)LOADER_START_ADDR;
;;;407    	for(i = 0; i < 28; i++)
;;;408    	{
;;;409    		if(HED_FlashWriteWord_St (i*4, loaderVecPtr[i]) != 0)
;;;410    		{
;;;411    			G_SW1SW2 = 0x6A80;
;;;412    			return;
;;;413    		}
;;;414    	}
;;;415    	G_SW1SW2 = 0x9000;
;;;416    }
00045e  bd70              POP      {r4-r6,pc}
                  |L1.1120|
000460  2569              MOVS     r5,#0x69              ;406
000462  032d              LSLS     r5,r5,#12             ;406
000464  2400              MOVS     r4,#0                 ;407
000466  e00c              B        |L1.1154|
                  |L1.1128|
000468  00a2              LSLS     r2,r4,#2              ;409
00046a  58a9              LDR      r1,[r5,r2]            ;409
00046c  00a0              LSLS     r0,r4,#2              ;409
00046e  f7fffffe          BL       HED_FlashWriteWord_St
000472  2800              CMP      r0,#0                 ;409
000474  d004              BEQ      |L1.1152|
000476  20d5              MOVS     r0,#0xd5              ;411
000478  01c0              LSLS     r0,r0,#7              ;411
00047a  4906              LDR      r1,|L1.1172|
00047c  8008              STRH     r0,[r1,#0]            ;411
00047e  e7ee              B        |L1.1118|
                  |L1.1152|
000480  1c64              ADDS     r4,r4,#1              ;407
                  |L1.1154|
000482  2c1c              CMP      r4,#0x1c              ;407
000484  d3f0              BCC      |L1.1128|
000486  2009              MOVS     r0,#9                 ;415
000488  0300              LSLS     r0,r0,#12             ;415
00048a  4902              LDR      r1,|L1.1172|
00048c  8008              STRH     r0,[r1,#0]            ;415
00048e  bf00              NOP      
000490  e7e5              B        |L1.1118|
;;;417    
                          ENDP

000492  0000              DCW      0x0000
                  |L1.1172|
                          DCD      G_SW1SW2

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CMD_INSList
000000  f0000000          DCB      0xf0,0x00,0x00,0x00
                          DCD      cmd_Symmetry_ALG
000008  f2000000          DCB      0xf2,0x00,0x00,0x00
                          DCD      cmd_CRC_Calculate
000010  c6000000          DCB      0xc6,0x00,0x00,0x00
                          DCD      cmd_GET_INFO
000018  d2000000          DCB      0xd2,0x00,0x00,0x00
                          DCD      cmd_NVM_Erase
000020  d6000000          DCB      0xd6,0x00,0x00,0x00
                          DCD      cmd_NVM_Write
000028  d8000000          DCB      0xd8,0x00,0x00,0x00
                          DCD      cmd_Loader_Resume
000030  ff000000          DCB      0xff,0x00,0x00,0x00
                          DCD      cmd_INSError
                          DCD      0x53d6a7a9
                          DCD      0x0d38bc86
                          DCD      0x13b88389
                          DCD      0x963e20cb
                          DCD      0x3dcd8d1e
                          DCD      0x76f1233b
                          DCD      0xf0e5ac7f
                          DCD      0x803571b0
                          DCD      0xa7408e0c
                          DCD      0x378c05ae
                          DCD      0xe58732c7
                          DCD      0xcc28a34e
                          DCD      0x0b52ee7a
                          DCD      0x8214c162
                          DCD      0x1d1a9d5a
                          DCD      0x7be7c2f0
                          DCD      0xdd3bfc0a
                          DCD      0x74dba3c3
                          DCD      0x5daffb8c
                          DCD      0x87286f17
                          DCD      0xe36194f3
                          DCD      0x307dfaa3
                          DCD      0x8e507b1d
                          DCD      0x81ef13c6
                          DCD      0x56bcf427
                          DCD      0x8a35434d
                          DCD      0xa5db5c40
                          DCD      0x04b9fe12
                          DCD      0x5a81fed3
                          DCD      0x82ac8df7
0000b0  ba37b15a          DCB      0xba,0x37,0xb1,0x5a
0000b4  cff77c7d          DCB      0xcf,0xf7,0x7c,0x7d
0000b8  0cfda406          DCB      0x0c,0xfd,0xa4,0x06
0000bc  c2a66dd8          DCB      0xc2,0xa6,0x6d,0xd8
0000c0  35028d5c          DCB      0x35,0x02,0x8d,0x5c
0000c4  284a571b          DCB      0x28,0x4a,0x57,0x1b
0000c8  a7a0259d          DCB      0xa7,0xa0,0x25,0x9d
0000cc  16080683          DCB      0x16,0x08,0x06,0x83
0000d0  79a5a7e3          DCB      0x79,0xa5,0xa7,0xe3
0000d4  043785e2          DCB      0x04,0x37,0x85,0xe2
0000d8  e4d35296          DCB      0xe4,0xd3,0x52,0x96
0000dc  4ee3a61d          DCB      0x4e,0xe3,0xa6,0x1d
0000e0  c860e9f7          DCB      0xc8,0x60,0xe9,0xf7
0000e4  b64c7fab          DCB      0xb6,0x4c,0x7f,0xab
0000e8  26743498          DCB      0x26,0x74,0x34,0x98
0000ec  df66e91a          DCB      0xdf,0x66,0xe9,0x1a
0000f0  a6b07fe0          DCB      0xa6,0xb0,0x7f,0xe0
0000f4  d159028b          DCB      0xd1,0x59,0x02,0x8b
0000f8  10a3188a          DCB      0x10,0xa3,0x18,0x8a
0000fc  7a01aa33          DCB      0x7a,0x01,0xaa,0x33
000100  d554d324          DCB      0xd5,0x54,0xd3,0x24
000104  296d08db          DCB      0x29,0x6d,0x08,0xdb
000108  86be8792          DCB      0x86,0xbe,0x87,0x92
00010c  1361045e          DCB      0x13,0x61,0x04,0x5e
000110  594d908a          DCB      0x59,0x4d,0x90,0x8a
000114  d0d6cc30          DCB      0xd0,0xd6,0xcc,0x30
000118  a9644d18          DCB      0xa9,0x64,0x4d,0x18
00011c  dc7651d3          DCB      0xdc,0x76,0x51,0xd3
000120  74d9a219          DCB      0x74,0xd9,0xa2,0x19
000124  1923c962          DCB      0x19,0x23,0xc9,0x62
000128  dd7575c2          DCB      0xdd,0x75,0x75,0xc2
00012c  4a702d09          DCB      0x4a,0x70,0x2d,0x09
000130  aa763319          DCB      0xaa,0x76,0x33,0x19
000134  9724ba88          DCB      0x97,0x24,0xba,0x88
000138  c50e4a79          DCB      0xc5,0x0e,0x4a,0x79
00013c  0ebc72b5          DCB      0x0e,0xbc,0x72,0xb5
000140  bde4af10          DCB      0xbd,0xe4,0xaf,0x10
000144  1ee89af9          DCB      0x1e,0xe8,0x9a,0xf9
000148  44915761          DCB      0x44,0x91,0x57,0x61
00014c  1c0b3cd1          DCB      0x1c,0x0b,0x3c,0xd1
000150  b122c0c5          DCB      0xb1,0x22,0xc0,0xc5
000154  c0bda54c          DCB      0xc0,0xbd,0xa5,0x4c
000158  7e9a67e4          DCB      0x7e,0x9a,0x67,0xe4
00015c  a64be691          DCB      0xa6,0x4b,0xe6,0x91
000160  c86f513f          DCB      0xc8,0x6f,0x51,0x3f
000164  d0335458          DCB      0xd0,0x33,0x54,0x58
000168  d40a85a8          DCB      0xd4,0x0a,0x85,0xa8
00016c  21aa0a6f          DCB      0x21,0xaa,0x0a,0x6f
000170  86498ec5          DCB      0x86,0x49,0x8e,0xc5
000174  e1186434          DCB      0xe1,0x18,0x64,0x34
000178  eafffb93          DCB      0xea,0xff,0xfb,0x93
00017c  3e99841f          DCB      0x3e,0x99,0x84,0x1f
000180  ae71e1df          DCB      0xae,0x71,0xe1,0xdf
000184  c77ccf37          DCB      0xc7,0x7c,0xcf,0x37
000188  a3d956cc          DCB      0xa3,0xd9,0x56,0xcc
00018c  f1c66f9a          DCB      0xf1,0xc6,0x6f,0x9a
000190  42e4f552          DCB      0x42,0xe4,0xf5,0x52
000194  94aed0f8          DCB      0x94,0xae,0xd0,0xf8
000198  23355fbc          DCB      0x23,0x35,0x5f,0xbc
00019c  6d202517          DCB      0x6d,0x20,0x25,0x17
0001a0  85e2b627          DCB      0x85,0xe2,0xb6,0x27
0001a4  9b3ce24e          DCB      0x9b,0x3c,0xe2,0x4e
0001a8  cbf52208          DCB      0xcb,0xf5,0x22,0x08
0001ac  24d6420c          DCB      0x24,0xd6,0x42,0x0c
0001b0  fbea4ea5          DCB      0xfb,0xea,0x4e,0xa5
0001b4  70                DCB      0x70
